* Fall 2021 235 Recursion Project

* Last name:

* First name:

* GitHub username:

* Notes:

- Due: Monday 2/22 8:00am


* General instructions:
- Fill in your name and GitHub username on top.
- solve one of the three problems below
- you must use a Makefile to build the project. The executable should
  be named *main*. 
- For development, I would recommend animating your program using the
  ansi escape code technique we used for the maze solver. This will,
  however slow down your program. If your final program takes more
  than 10 seconds to run on your laptop, turn off this feature for
  your submission so that when run your program just prints out the
  final result. 

* Complete one of the following three
** Knights tour

In Chess a knight moves with a 2,1 or 1,2 combination as indicated
here: 

#+begin_example
.8.1.
7...2
..N..
6...3
.5.4.
#+end_example

A knight in the center location marked with the *N* can move to any of
the eight locations numbered 1 through 8.

Use a 2D array to represent the board and write a program that, given
a starting location, will determine a sequence of moves that the
knight can take to visit every square on the board without visiting
any square more than once. 

This is analogous to the maze problem and solution.

Notes: 

- Your program should not require any user input and should just run
  and show that it works. 
- There might not be a solution for any size board from any starting
  location. 
- Your solution should work for any size board with any starting
  location but develop for a 5x5 board as it will run more quickly.
- Your submitted solution should show that it works for a 5x5
  board. Specify a starting location that works.
- Your solution should print out a board with numbers representing the
  move sequence.
  
  For example, a valid solution might show: 

#+begin_example
 1:14:19: 8:25:
 6: 9: 2:13:18:
15:20: 7:24: 3:
10: 5:22:17:12:
21:16:11: 4:23:
#+end_example

** N-queens

A queen can move on a chessboard any number of squares either
horizontally, vertically, or diagonally. If a queen can move to a
square it can attack the piece on that square.

#+begin_example
x..x..x.
.x.x.x..
..xxx...
xxxQxxxx
..xxx...
.x.x.x..
x..x..x.
...x...x
#+end_example

In the above example, the queen at the center can move/attack any of
the locations marked with an *x*. 

Write a program that will find an arrangement of N queens on an NxN
board such that no queen can attack another queen.

For example, for a 4x4 board, this arrangement would solve the
problem: 

#+begin_example
..Q.
Q...
...Q
.Q..
#+end_example

Use a 2D array to represent your board. When run, your program should
print out a board with a legal configuration of queens. 

** 15 puzzle 

A 15 puzzle is a comprised of a 4x4 grid with 15 tiles and one
space. The puzzle is solved by sliding tiles within this grid to
rearrange them to put the tiles in order. See
https://15puzzle.netlify.app/ for an example.

Your program should create a 15x15 puzzle and run your solver to
determine the moves to solve the puzzle.

